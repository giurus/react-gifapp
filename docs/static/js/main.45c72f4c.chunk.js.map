{"version":3,"sources":["components/AddCategory.jsx","helpers/getgifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.js","GifApp.js","index.js"],"names":["AddCategory","setCategory","useState","title","setTitle","onSubmit","e","preventDefault","trim","length","cat","type","className","placeholder","onChange","target","value","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","images","downsized_medium","GifGridItem","src","alt","height","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","role","GifApp","item","ReactDOM","render","document","getElementById"],"mappings":"qLA2BeA,EAxBK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACdC,mBAAS,IADK,mBACjCC,EADiC,KAC1BC,EAD0B,KASxC,OACC,qCACC,sBAAMC,SARa,SAAAC,GACpBA,EAAEC,iBACFJ,EAAMK,OAAOC,OAAS,GAAKR,GAAY,SAAAS,GAAG,OAAKP,GAAL,mBAAeO,OACzDN,EAAS,KAKR,SACC,uBAAOO,KAAK,OAAOC,UAAU,eAAeC,YAAY,YAAYC,SAAU,SAAAR,GAAC,OAAIF,EAASE,EAAES,OAAOC,QAAQA,MAAOb,MAErH,uBACA,0C,+BClBUc,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAChBC,EADgB,iDACgCC,UAAUH,GAD1C,8DAECI,MAAMF,GAFP,cAEhBG,EAFgB,gBAGCA,EAASC,OAHV,uBAGdC,EAHc,EAGdA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAG,YAAK,CAC7BC,GAAID,EAAIC,GACR1B,MAAOyB,EAAIzB,MACXiB,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,QAPb,kBASfM,GATe,4CAAH,sDCaLM,EAXK,SAAC,GAAoB,IAAlB7B,EAAiB,EAAjBA,MAAOiB,EAAU,EAAVA,IAC7B,OACC,sBAAKR,UAAU,MAAf,UACC,qBAAKA,UAAU,yCAAf,SACC,qBAAKqB,IAAKb,EAAKc,IAAK/B,EAAOgC,OAAO,YAEnC,6BAAKhC,QCmBOiC,EAvBC,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECDN,SAAAA,GAAa,IAAD,EACbhB,mBAAS,CAClCuB,KAAM,GACNY,SAAS,IAH6B,mBAChCC,EADgC,KACzBC,EADyB,KAevC,OATAC,qBAAU,WACTvB,EAAQC,GAAUuB,MAAK,SAAAC,GACtBH,EAAS,CACRd,KAAMiB,EACNL,SAAS,SAGT,CAACnB,IAEGoB,EDb2BK,CAAazB,GAAjCY,EADmB,EACzBL,KAAcY,EADW,EACXA,QAEtB,OACC,qCACC,uBACA,0CAAanB,KACb,uBACA,sBAAKN,UAAU,mCAAf,UACEyB,GACA,qBAAKzB,UAAU,yBAAyBgC,KAAK,SAA7C,SACC,sBAAMhC,UAAU,kBAAhB,0BAGDkB,EAAOH,KAAI,SAAAC,GAAG,OACd,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,OAEJ,IAAlBC,EAAOrB,SAA4B,IAAZ4B,GAAqB,oBAAIzB,UAAU,aAAd,qCEjBpCiC,EAAS,WAAO,IAAD,EACK3C,mBAAS,CAAC,kBADf,mBACpBgB,EADoB,KACVjB,EADU,KAG3B,OACC,qCACC,wCACA,uBACA,cAAC,EAAD,CAAaA,YAAaA,IAC1B,6BACEiB,EAASS,KAAI,SAAAmB,GAAI,OACjB,cAAC,EAAD,CAAoB5B,SAAU4B,GAAhBA,Y,MCTnBC,IAASC,OAAO,cAAC,EAAD,IAAYC,SAASC,eAAe,W","file":"static/js/main.45c72f4c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategory }) => {\r\n\tconst [title, setTitle] = useState('');\r\n\r\n\tconst handleSubmit = e => {\r\n\t\te.preventDefault();\r\n\t\ttitle.trim().length > 2 && setCategory(cat => [title, ...cat]);\r\n\t\tsetTitle('');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<input type=\"text\" className=\"form-control\" placeholder=\"Search...\" onChange={e => setTitle(e.target.value)} value={title} />\r\n\t\t\t</form>\r\n\t\t\t<hr />\r\n\t\t\t<h3>List</h3>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nAddCategory.propTypes = {\r\n\tsetCategory: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddCategory;\r\n","export const getGifs = async category => {\r\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=8&api_key=trkPXecjWraSpdw3JgFmUQvu4U97GoZY`;\r\n\tconst response = await fetch(url);\r\n\tconst { data } = await response.json();\r\n\tconst gifs = data.map(img => ({\r\n\t\tid: img.id,\r\n\t\ttitle: img.title,\r\n\t\turl: img.images?.downsized_medium.url\r\n\t}));\r\n\treturn gifs;\r\n};\r\n","import React from 'react';\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n\treturn (\r\n\t\t<div className=\"col\">\r\n\t\t\t<div className=\"card animate__animated animate__fadeIn\">\r\n\t\t\t\t<img src={url} alt={title} height=\"170px\" />\r\n\t\t\t</div>\r\n\t\t\t<h4>{title}</h4>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\tconst { data: images, loading } = useFetchGifs(category);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<hr />\r\n\t\t\t<h3>Search: {category}</h3>\r\n\t\t\t<hr />\r\n\t\t\t<div className=\"row row-cols-1 row-cols-md-4 g-3\">\r\n\t\t\t\t{loading && (\r\n\t\t\t\t\t<div className=\"spinner-border mx-auto\" role=\"status\">\r\n\t\t\t\t\t\t<span className=\"visually-hidden\">Loading...</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t\t{images.map(img => (\r\n\t\t\t\t\t<GifGridItem key={img.id} {...img} />\r\n\t\t\t\t))}\r\n\t\t\t\t{images.length === 0 && loading === false && <h5 className=\"text-muted\">No results found</h5>}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getgifs';\r\n\r\nexport const useFetchGifs = category => {\r\n\tconst [state, setstate] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tgetGifs(category).then(imgs => {\r\n\t\t\tsetstate({\r\n\t\t\t\tdata: imgs,\r\n\t\t\t\tloading: false\r\n\t\t\t});\r\n\t\t});\r\n\t}, [category]);\r\n\r\n\treturn state;\r\n};\r\n","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nexport const GifApp = () => {\r\n\tconst [category, setCategory] = useState(['One Punch Man']);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h2>GifApp</h2>\r\n\t\t\t<hr />\r\n\t\t\t<AddCategory setCategory={setCategory} />\r\n\t\t\t<ul>\r\n\t\t\t\t{category.map(item => (\r\n\t\t\t\t\t<GifGrid key={item} category={item} />\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t</>\r\n\t);\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifApp } from './GifApp.js';\nimport './index.css';\n\nReactDOM.render(<GifApp />, document.getElementById('root'));\n"],"sourceRoot":""}